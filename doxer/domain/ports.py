from typing import Protocol
from uuid import UUID

from doxer.domain.entities import UniqueLink, UsedToken, UserData
from doxer.domain.value_objects import LocationData


class UserDataRepositoryProtocol(Protocol):
    async def create(self, user_data: UserData) -> UserData: ...
    async def get_by_token(self, token: str) -> UserData: ...

class UniqueLinkRepositoryProtocol(Protocol):
    async def create(self, link: UniqueLink) -> UniqueLink: ...
    async def get_by_name(self, name: str) -> UniqueLink: ...
    async def exists(self, name: str) -> bool: ...

class UsedTokenRepositoryProtocol(Protocol):
    async def create(self, used_token: UsedToken) -> UsedToken: ...
    async def exists(self, token: str) -> bool: ...

class TokenHandlerProtocol(Protocol):
    async def verify_token(self, token: str) -> bool: ...
    async def mark_as_used(self, token: str) -> None: ...
    def generate_token(self) -> str: ...


class LocationServiceProtocol(Protocol):
    async def get_location_data(self, ip_address: str) -> LocationData: ...

class GifGeneratorProtocol(Protocol):
    async def create_gif_with_text(self, user_data: UserData) -> bytes: ...

class NotificationServiceProtocol(Protocol):
    async def send_notification(self, user_data: UserData) -> None: ...

class IdGeneratorProtocol(Protocol):
    def generate_id(self) -> UUID: ...

